---
Alliance:
  api-url: /alliance
  methods:
    find:
      desc: 'Find an alliance by name. Returns a hash reference containing alliance ids and alliance names. So if you searched for "Lacuna" you might get back a result set that looks like this:'
      parameters:
        - description: A session id.
          name: session_id
        - description: "The name your searching for. It's case insensitive, and partial names work fine. Must be at least 3 characters."
          name: name
      returns: |-
        {
            "alliances" : [
                {
                    "id" : "id-goes-here",
                    "name" : "Lacuna Expanse Allies"
                },
                {    
                    "id" : "id-goes-here2",
                    "name" : "Lacuna Pirates"
                }
            ],
            "status" : { ... }
         }
    view_profile:
      desc: Provides a list of the data that's publicly known about this alliance.
      parameters:
        - description: A session id.
          name: session_id
        - description: The id of the alliance for which you'd like to retrieve the public profile.
          name: alliance_id
      returns: |-
        {
            "profile" : {
                "id" : "id-goes-here",
                "name" : "Lacuna Expanse Allies",
                "description" : "Blah blah blah blah...",
                "leader_id" : "id-goes-here",
                "date_created" : "01 31 2010 13:09:05 +0600",
                "members" : [
                    {
                        "id" : "id-goes-here",
                        "name" : "Lacuna Expanse Corp"
                    },
                    ...
                ],
                "space_stations" : [
                    {
                        "id" : "id-goes-here",
                        "name" : "The Life Star",
                        "x" : -342,
                        "y" : 128
                    },
                    ...
                ],
                "influence" : 0
            },
            "status" : { ... }
         }
      throws:
        - 1002
Body:
  api-url: /body
  methods:
    abandon:
      desc: "Abandon's a colony, and destroys everything on the planet. Returns a status block."
      parameters:
        - description: A session id.
          name: session_id
        - description: The unique id of the body you wish to abandon. You cannot abandon your home planet.
          name: body_id
    get_buildable:
      desc: 'Provides a list of all the building types that are available to be built on a given space on a planet that are within a specific tag.The reason section provides a little detail about why a building can or cannot be built. It is formatted the same way an exception would be formatted (an array ref of error code, error message, and error data).The tags section can be used to display the buildable buildings in a way that makes sense to the end user. The tags available are as follows:'
      parameters:
        - description: A session id.
          name: session_id
        - description: The id of the body you wish to retrieve the buildings on.
          name: body_id
        - description: The x axis of the area on the planet you wish to place the building. Valid values are between -5 and 5 inclusive.
          name: x
        - description: The y axis of the area on the planet you wish to place the building. Valid values are between -5 and 5 inclusive.
          name: y
        - description: 'A tag that will limit the list of buildings to return. Required. Cannot be Now, Soon, or Later, but all other tags are fair game.'
          name: tag
      returns: |-
        {
            "max_items_in_build_queue" : 6,
            "build_queue" : {
                "max" : 4,
                "current" : 3
            },
            "buildable" : {
                "Wheat Farm" : {
                    "url" :"/wheat",
                    "build" : {
                        "can" : 1,
                        "no_plot_use" : 0,
                        "cost" : {
                            "food" : 500,
                            "water" : 500,
                            "energy" : 500,
                            "waste" : 500,  # is added to your storage, not spent like the other resources
                            "ore" : 1000,
                            "time" : 1200,
                        },
                        "extra_level" : 7,  # only shows up for some plan types, skips level 1 and goes straight to this level
                        "tags" : ["Now","Resources","Food"],
                        "reason" : ""
                    },
                    "image" : "wheat1",
                    "production" : {
                        "food_hour" : 1500,
                        "energy_hour" : -144,
                        "ore_hour" : -1310,
                        "water_hour" : -1100,
                        "waste_hour" : 133,
                        "happiness_hour" : 0,
                    }
                },
                ...
            },
            "status" : { ... }
         }
      throws:
        - 1002
        - 1010
        - 1011
        - 1012
        - 1013
    get_buildings:
      desc: "Retrieves a list of the buildings on a planet. The surface of all planet's is made up of an 11x11 tile grid stretching from -5 to 5 in both an x and y axis. The planetary command building is always built at 0,0.The get_body method (among others) will give you size and building_count. A planet's size is the number of buildings that can be built on it. The building count is the number of buildings you have built so far. The maximum size of any planet is 121 (11x11=121), however just because there are spots remaining doesn't mean you can fill them. Also, sometimes permanent structures such as lakes will occupy a tile space, and can artificially lower the number of buildings you can place on a planet.The list of building's retreived by this method should be placed on the 11x11 grid, and the extra space should be filled in by blank ground tiles."
      parameters:
        - description: A session id.
          name: session_id
        - description: The id of the body you wish to retrieve the buildings on.
          name: body_id
      returns: |-
        {
            "buildings" : {
                "id-goes-here" : {
                    "name" : "Apple Orchard",
                    "x" : 1,
                    "y" : -1,
                    "url" : "/apple",
                    "level" : 3,
                    "image" : "apples3",
                    "efficiency" : 95,
                    "pending_build" : {                            # only included when building is building/upgrading
                        "seconds_remaining" : 430,
                        "start" : "01 31 2010 13:09:05 +0600",
                        "end" : "01 31 2010 18:09:05 +0600"
                    },
                    "work" : {                                     # only included when building is working (Parks, Waste Recycling, etc)
                        "seconds_remaining" : 49,
                        "start" : "01 31 2010 13:09:05 +0600",
                        "end" : "01 31 2010 18:09:05 +0600"
                    }
                },
                "id-goes-here2" : {
                    "name" : "Planetary Command",
                    "x" : 0,
                    "y" : 0,
                    "url" : "/command",
                    "level" : 1,
                    "efficiency" : 100,
                    "image" : "command1"
                }
            },
            "body" : {
                "surface_image" : "surface-e"
            },
            "status" : { ... }
         }
      throws:
        - 1002
        - 1010
    get_status:
      desc: 'Returns detailed statistics about a planet.NOTE: You should probably never call this method directly, as it is a wasted call since the data it returns comes back in the status block of every relevant request. See "Status" in Intro for details.'
      parameters:
        - description: A session id.
          name: session_id
        - description: The id of the body you wish to retrieve.
          name: body_id
      returns: |-
        {
            "server" : { ... },
            "empire" : { ... },
            "body" : {
                "id" : "id-goes-here",
                "x" : -4,
                "y" : 10,
                "star_id" : "id-goes-here",
                "star_name" : "Sol",
                "orbit" : 3,
                "type" : "habitable planet",
                "name" : "Earth",
                "image" : "p13",
                "size" : 67,
                "water" : 900,
                "ore" : {
                    "gold" : 3399,
                    "bauxite" : 4000,
                    ...
                },
                "empire" : { # this section only exists if an empire occupies it
                    "id" : "id-goes-here",
                    "name" : "Earthlings",
                    "alignment" : "ally",   # can be 'ally','self', or 'hostile'
                    "is_isolationist" : 1
                }
                
                --------- if you own the planet the data below will be included ---------
                
                "needs_surface_refresh" : 1, # indicates that the client needs to call get_buildings() because something has changed
                "building_count" : 7,
                "plots_available" :60,
                "happiness" : 3939,
                "happiness_hour" : 25,
                "food_stored" : 33329,
                "food_capacity" : 40000,
                "food_hour" : 229,
                "energy_stored" : 39931,
                "energy_capacity" : 43000,
                "energy_hour" : 391,
                "ore_hour" 284,
                "ore_capacity" 35000,
                "ore_stored" 1901,
                "waste_hour" : 933,
                "waste_stored" : 9933,
                "waste_capacity" : 13000,
                "water_stored" : 9929,
                "water_hour" : 295,
                "water_capacity" : 51050,
                "incoming_foreign_ships" : [  # will only be included when foreign ships are coming to your planet, more detail at spaceport
                    {
                        "id" : "id-goes-here",                          # not terribly useful, except for client caching of notices
                        "date_arrives" : "01 31 2010 13:09:05 +0600",
                        "is_own" : 1,                                   # is this from one of our own planets
                        "is_ally" : 1                                   # is this from a planet within our alliance
                    },
                    ...
                ]
            }
         }
    rename:
      desc: 'Renames a body, provided the empire attached to the session owns the body. Returns a 1 on success.'
      parameters:
        - description: A session id.
          name: session_id
        - description: The id of the body you wish to rename.
          name: body_id
        - description: The new name of the body.
          name: name
      throws:
        - 1000
        - 1002
        - 1010
Empire:
  api-url: /empire
  methods:
    boost_energy:
      desc: 'Spends 5 essentia, and boosts energy production on all planets for 7 days. If a boost is already underway, calling again will add 7 more days.'
      parameters:
        - description: A session id.
          name: session_id
      returns: |-
        {
            "status" : { ... },
            "energy_boost" : "01 31 2010 13:09:05 +0600"
         }
      throws:
        - 1011
    boost_food:
      desc: 'Spends 5 essentia, and boosts food production on all planets for 7 days. If a boost is already underway, calling again will add 7 more days.'
      parameters:
        - description: A session id.
          name: session_id
      returns: |-
        {
            "status" : { ... },
            "food_boost" : "01 31 2010 13:09:05 +0600"
         }
      throws:
        - 1011
    boost_happiness:
      desc: 'Spends 5 essentia, and boosts happiness production on all planets for 7 days. If a boost is already underway, calling again will add 7 more days.'
      parameters:
        - description: A session id.
          name: session_id
      returns: |-
        {
            "status" : { ... },
            "happiness_boost" : "01 31 2010 13:09:05 +0600"
         }
      throws:
        - 1011
    boost_ore:
      desc: 'Spends 5 essentia, and boosts ore production on all planets for 7 days. If a boost is already underway, calling again will add 7 more days.'
      parameters:
        - description: A session id.
          name: session_id
      returns: |-
        {
            "status" : { ... },
            "ore_boost" : "01 31 2010 13:09:05 +0600"
         }
      throws:
        - 1011
    boost_storage:
      desc: 'Spends 5 essentia, and boosts storage (all 5 types) on all planets for 7 days. If a boost is already underway, calling again will add 7 more days.'
      parameters:
        - description: A session id.
          name: session_id
      returns: |-
        {
            "status" : { ... },
            "storage_boost" : "01 31 2010 13:09:05 +0600"
         }
      throws:
        - 1011
    boost_water:
      desc: 'Spends 5 essentia, and boosts water production on all planets for 7 days. If a boost is already underway, calling again will add 7 more days.'
      parameters:
        - description: A session id.
          name: session_id
      returns: |-
        {
            "status" : { ... },
            "water_boost" : "01 31 2010 13:09:05 +0600"
         }
      throws:
        - 1011
    change_password:
      desc: Change the empire password.
      parameters:
        - description: A session id.
          name: session_id
        - description: The password to log in to the empire. Required. Must be between 6 and 30 characters.
          name: password1
        - description: Retyping the password again. This must match password1 to succeed.
          name: password2
    create:
      desc: "Creates a new empire and then returns an empire_id.This is not the end of the story though. Now you must either create a update_species for this empire and then found it, or just skip the species part and found the empire.NOTE: If either captcha_guid or captcha_solution don't match what the server is expecting it will throw a 1014 error, and the data portion of the error message will contain new captcha information. You must use this. A captcha cannot be used more than once."
      parameters:
        - description: 'A 36 character code that was sent to the user by a friend. It is usable only once, and will ensure that their friend gets a home planet that is in relatively close proximity to their home planet.'
          name: params
      throws:
        - 1000
        - 1001
        - 1002
        - 1014
    disable_self_destruct:
      desc: Disables the self distruction countdown.
      parameters:
        - description: A session id.
          name: session_id
      returns: "{\n    \"status\" : { ... }\n }"
    edit_profile:
      desc: Edits properties of an empire. Returns the view_profile method. See also the view_profile and view_public_profile methods.
      parameters:
        - description: A session id.
          name: session_id
        - description: Defaults to 0. Set to 1 if the user no longer wants messages to be posted to their Facebook wall.
          name: profile
      throws:
        - 1005
        - 1009
    enable_self_destruct:
      desc: 'Enables a destruction countdown of 24 hours. Sometime after the timer runs out, the empire will vaporize.'
      parameters:
        - description: A session id.
          name: session_id
      returns: "{\n    \"status\" : { ... }\n }"
    fetch_captcha:
      desc: Retrieves a captcha that is required in order to call the create method. Display the resulting captcha in your creation form and then call create with the user's response.
      returns: |-
        {
            "guid" : "id-goes-here",
            "url" : "'https://extras.lacunaexpanse.com.s3.amazonaws.com/captcha/id/id-goes-here.png" 
         }
    find:
      desc: 'Find an empire by name. Returns a hash reference containing empire ids and empire names. So if you searched for "Lacuna" you might get back a result set that looks like this:'
      parameters:
        - description: A session id.
          name: session_id
        - description: "The name your searching for. It's case insensitive, and partial names work fine. Must be at least 3 characters."
          name: name
      returns: |-
        {
            "empires" : [
                {
                    "id" : "id-goes-here",
                    "name" : "Lacuna Expanse Corp"
                },
                {    
                    "id" : "id-goes-here2",
                    "name" : "Lacuna Pirates"
                }
            ],
            "status" : { ... }
         }
    found:
      desc: "Set up an empire on it's new home world. Once this method is called, the species can no longer be modified.The welcome_message_id is a message id for a message in the inbox, that starts the tutorial. This is provided so the user can be prompted to read that message right away."
      parameters:
        - description: The empire to found.
          name: empire_id
        - description: "Your client's unique API key, identifiying it from all other clients. See ApiKeys for details."
          name: api_key
        - description: Use of the invite code here is deprecated. Please pass in the invite_code in create instead.
          name: invite_code
      returns: |-
        {
            "session_id" : "id-goes-here",
            "welcome_message_id" : "id-goes-here",
            "status" : { ... }
         }
    get_invite_friend_url:
      desc: 'Returns a URL that can be pasted into a blog, forum, or whatever to invite friends.'
      parameters:
        - description: A session id.
          name: session_id
      returns: |-
        {
            "status" : { ... },
            "referral_url" : "http://servername.lacunaexpanse.com/#referral=XXXX"
         }
    get_species_templates:
      desc: Returns an array ref of species templates that can be used to help the user populate the form for update_species.
      returns: |-
        [
            {
               "name" : "Average", 
                "description" : "A race of average intellect, and weak constitution.',
                "min_orbit" : 3,
                "max_orbit" : 3,
                "manufacturing_affinity" : 4,
                "deception_affinity" : 4,
                "research_affinity" : 4,
                "management_affinity" : 4,
                "farming_affinity" : 4,
                "mining_affinity" : 4,
                "science_affinity" : 4,
                "environmental_affinity" : 4,
                "political_affinity" : 4,
                "trade_affinity" : 4,
                "growth_affinity" : 4
            },
            ...
         ]
    get_status:
      desc: 'Returns information about the current state of the empire.NOTE: You should probably never call this method directly, as it is a wasted call since the data it returns comes back in the status block of every relevant request. See "Status" in Intro for details.'
      parameters:
        - description: A session id.
          name: session_id
      returns: |-
        {
            "server" : { ... },
            "empire" : {
                "id" : "xxxx",
                "rpc_count" : 321, # the number of calls made to the server
                "is_isolationist" : 1, # hasn't sent out probes or colony ships
                "name" : "The Syndicate",
                "status_message" : "A spy's work is never done.",
                "home_planet_id" : "id-goes-here",
                "has_new_messages" : 4,
                "newest_message" : {
                    "id" : "id-goes-here",
                    "date_received" : "01 31 2010 13:09:05 +0600",
                    "subject" : "Boom!"
                },
                "essentia" : 0,
                "planets" : {
                    "id-goes-here" : "Earth",
                    "id-goes-here" : "Mars
                }
            }
         }
      throws:
        - 1002
    invite_friend:
      desc: Send an invitation code to a friend so that they can start in the same zone as your empire.
      parameters:
        - description: A session id.
          name: session_id
        - description: 'The email address of your friend, or a comma separated string of email addresses.'
          name: email
        - description: "After the message, the user's empire name in the game, the friend code, and URI to the server will be attached."
          name: custom_message
      returns: " I'm having a great time with this new game called Lacuna Expanse. Come play with me."
    is_name_available:
      desc: 'Returns a 1 if the name is available, or a throws an exception if it is not.'
      parameters:
        - description: The name of the empire to search for.
          name: name
      throws:
        - 1000
    login:
      desc: 'Returns a hash like the following after confirming the password matches the empire.NOTE: Once established, this session will stick around for up to 2 hours of inactivity. Therefore, you need not login again if you still have a valid session.'
      parameters:
        - description: The name of the empire.
          name: name
        - description: The password to authenticate to the empire.
          name: password
        - description: "Your client's unique API key, identifiying it from all other clients. See ApiKeys for details."
          name: api_key
      returns: |-
        {
            "session_id" : "id-goes-here",
            "status" : { ... }
         }
      throws:
        - 1004
        - 1005
    logout:
      desc: Ends a session. Returns 1.
      parameters:
        - description: A session id.
          name: session_id
      throws:
        - 1006
    redeem_essentia_code:
      desc: Redeems an essentia code and applies the essentia to the empire's balance.
      parameters:
        - description: A session id.
          name: session_id
        - description: A 36 character string that was sent to the user via email.
          name: code
      returns: "{\n    \"status\" : { ... }\n }"
    redefine_species:
      desc: 'Allows a user to spend essentia and redefine their species affinities, name, and description. This can only be used after the empire has been founded. If you want to redefine the species during empire creation then see update_species.See also redefine_species_limits.WARNING: Once this is done it cannot be redone for 1 month, so make sure the user is aware of this and prompt them appropriately before submitting the request.'
      parameters:
        - description: A ssession id.
          name: session_id
        - description: See the params list in the update_species method.
          name: params
      returns: "{\n    \"status\" : { ... }\n }"
    redefine_species_limits:
      desc: Defines the extra limits placed upon a user that want's to redefine their species.
      parameters:
        - description: A session id.
          name: session_id
      returns: |-
        {
            "status" : { ... },
            "essentia_cost" : 100,   # cost to redefine the species
            "max_orbit" : 2,         # maximum settable orbit
            "min_orbit" : 5,         # minimum settable orbit
            "min_growth" : 4,        # minimum for growth affinity
            "can" : 0,               # whether or not they can redefine their species
            "reason" : "You have already redefined your species in the past 30 days."
         }
    reset_password:
      desc: Change the empire password that has been forgotten.
      parameters:
        - description: A key that was emailed to the user via the send_password_reset_message method.
          name: reset_key
        - description: The password to log in to the empire. Required. Must be between 6 and 30 characters.
          name: password1
        - description: Retyping the password again. This must match password1 to succeed.
          name: password2
        - description: "Your client's unique API key, identifiying it from all other clients. See ApiKeys for details."
          name: api_key
      returns: |-
        {
           "session_id" : "id-goes-here",
           "status" : { ... }
         }
    send_password_reset_message:
      desc: Starts a password recovery process by sending an email with a recovery key.
      parameters:
        - description: The email address associated with an empire.
          name: params
    set_status_message:
      desc: 'Sets the empire status message. Similar to what you might put on your Facebook wall, or in a tweet, but about your empire.'
      parameters:
        - description: A session id.
          name: session_id
        - description: "A message to indicate what you're doing, how you're feeling, or other status indicator. Limited to 100 characters, cannot be blank, and cannot contain @, &, <, >, or ;."
          name: message
    update_species:
      desc: "Updates the empire's species and returns 1. Can only be called after create has been called and before found has been called. Before or after that will throw an exception. If you have already founded your empire then use redefine_species.See also: get_species_templates"
      parameters:
        - description: The id of the empire you wish to update a species for.
          name: empire_id
        - description: 'An integer between 1 and 7 inclusive, where 7 is best. Determines species advantages in colonization.'
          name: params
      throws:
        - 1000
        - 1002
        - 1005
        - 1007
        - 1008
        - 1009
        - 1010
    view_boosts:
      desc: Shows the dates at which boosts have expired or will expire. Boosts are subsidies applied to various resources using essentia.
      parameters:
        - description: A session id.
          name: session_id
      returns: |-
        {
            "status" : { ... },
            "boosts" : {
                "food" : "01 31 2010 13:09:05 +0600",
                "ore" : "01 31 2010 13:09:05 +0600",
                "energy" : "01 31 2010 13:09:05 +0600",
                "water" : "01 31 2010 13:09:05 +0600",
                "happiness" : "01 31 2010 13:09:05 +0600",
                "storage" : "01 31 2010 13:09:05 +0600"
            }
         }
    view_profile:
      desc: Provides a list of the editable properties of the current empire's profile. See also the edit_profile and view_public_profile methods.
      parameters:
        - description: A session id.
          name: session_id
      returns: |-
        {
            "profile" : {
               "description" : "description goes here",
               "status_message" : "status message goes here",
               "medals" : {
                   "id-goes-here" : {
                       "name" : "Built Level 1 Building",
                       "image" : "building1",
                       "date" : "01 31 2010 13:09:05 +0600",
                       "public" : 1,
                       "times_earned" : 4
                   },
                   ...
               },
               "city" : "Madison",
               "country" : "USA",
               "notes" : "notes go here",
               "skype" : "joeuser47",
               "player_name" : "Joe User",
               "skip_happiness_warnings" : 0,
               "skip_resource_warnings" : 0,
               "skip_pollution_warnings" : 0,
               "skip_medal_messages" : 0,
               "skip_facebook_wall_posts" : 0,
               "email" : "joe@example.com",
               "sitter_password" : "abcdefgh"                   # never give out your real password, use the sitter password
            },
            "status" : { ... }
         }
    view_public_profile:
      desc: Provides a list of the data that's publicly known about this empire.
      parameters:
        - description: A session id.
          name: session_id
        - description: The id of the empire for which you'd like to retrieve the public profile.
          name: empire_id
      returns: |-
        {
            "profile" : {
                "id" : "empire-id-goes-here",
                "name" : "Lacuna Expanse Corp",
                "colony_count" : 1,
                "status_message" : "Looking for Essentia."
                "description" : "We are the original inhabitants of the Lacuna Expanse.",
                "city" : "Madison",
                "country" : "USA",
                "skype" : "joeuser47",
                "player_name" : "Joe User",
                "medals" : {
                    "id-goes-here" : {
                        "name" : "Built Level 1 Building",
                        "image" : "building1",
                        "date" : "01 31 2010 13:09:05 +0600",
                       "times_earned" : 4
                    },
                    ...
                },
                "last_login" : "01 31 2010 13:09:05 +0600",
                "date_founded" : "01 31 2010 13:09:05 +0600",
                "species" : "Lacunan",
                "alliance" : {
                    "id" : "id-goes-here",
                    "name" : "The Confederacy"
                },
                "known_colonies" : [
                    {
                        "id" : "id-goes-here",
                        "x" : "1",
                        "y" : "-543",
                        "name" : "Earth",
                        "image" : "p12-3"
                    },
                    ...
                ]
            },
            "status" : { ... }
         }
      throws:
        - 1002
    view_species_stats:
      desc: Returns a list of the stats associated with an empire's species as it was originally created. An empire can only view it's own species stats through this method.
      parameters:
        - name: session_id
      returns: |-
        {
            "species" : {
               "name" : "Human",
               "description" : "The descendants of Earth.",
               "min_orbit" : 3,
               "max_orbit" : 3,
               "manufacturing_affinity" : 4,
               "deception_affinity" : 4,
               "research_affinity" : 4,
               "management_affinity" : 4,
               "farming_affinity" : 4,
               "mining_affinity" : 4,
               "science_affinity" : 4,
               "environmental_affinity" : 4,
               "political_affinity" : 4,
               "trade_affinity" : 4,
               "growth_affinity" : 4
            },
            "status" : { ... }
         }
Inbox:
  api-url: /inbox
  methods:
    archive_messages:
      desc: "Archives a list of messages.NOTE: You cannot archive sent messages. You'll get a failure if the message is either already archived, or it's a message that cannot be archived, like a message in your sent folder."
      parameters:
        - description: A session id.
          name: session_id
        - description: An array reference of message ids.
          name: message_ids
      returns: |-
        {
            "success" : ["id-goes-here","id-goes-here"],
            "failure" : ["id-goes-here","id-goes-here"],
            "status" : { ... }
         }
    read_message:
      desc: "Retrieves a message. Marks it read if it hasn't been already.recipients is the complete list of users who received the message, whereas to is the user that owns this particular copy of the message."
      parameters:
        - description: A session id.
          name: session_id
        - description: A message_id that was returned using view_inbox or one of the other view_ methods.
          name: message_id
      returns: |-
        {
            "message" : {
                "id" : "id-goes-here",
                "from" : "Dr. Stephen T. Colbert DFA",
                "from_id" : "id-goes-here",
                "to" : "Jon Stewart",
                "to_id" : "id-goes-here",
                "subject" : "Vaxaslim",
                "body" : "Just a reminder that Vaxaslim may cause involuntary narnia adventures.",
                "date" : "01 31 2010 13:09:05 +0600",
                "has_read" : 1,
                "has_replied" : 0,
                "has_archived" : 0,
                "in_reply_to" : "",
                "recipients" : ["John Stewart"],
                "tags" : ["Correspondence"],
                "attachments" : { # no more than one of each type per email
                    "image" : {
                        "url" : "http://www.example.com/path/image.jpg",
                        "title" : "Some Title",
                        "link" : "http://www.lacunaexpanse.com/", # optional link to somewhere
                    "link" : {
                        "url" : "http://www.lacunaexpanse.com/",
                        "label" : "The Lacuna Expanse Website"
                    }
                    "table" : [
                        [ "Hostname", "IP Address" ], # first row is always a header
                        [ "example.lacunaexpanse.com", "192.168.1.24" ],
                        ...
                    ],
                    "map" : {
                        "surface" : "surface-6",
                        "buildings" : [
                            {
                                "x" : -3,
                                "y" : 4,
                                "image" : "apples4"
                            }
                            ...
                        ]
                    }
                }
            },
            status  => { ... }
         }
      throws:
        - 1002
        - 1006
        - 1010
    send_message:
      desc: Sends a message to other players.
      parameters:
        - description: A session id.
          name: session_id
        - description: 'NOTE: You may want to expose a search option here using "find" in Empire.'
          name: recipients
        - description: 'A subject for the message. It cannot contain any special characters, and must be less than 100 characters in length, and cannot contain &, @, ;, <, or >.'
          name: subject
        - description: 'The body of the message. It cannot contain any special characters, and must be less than 200,000 characters in length, and cannot contain < or >.'
          name: body
        - description: "A message id. If this is set, then the attachments of the message id specified will be sent along with the new message.The text of the message will not automatically be forwarded, if that is desired, it is the client's responsibility to include it in the body of the new message."
          name: options
      throws:
        - 1002
        - 1005
        - 1006
    view_archived:
      desc: Exactly the same as view_inbox except that it shows archived messages instead.
      parameters:
        - name: session_id
        - name: options
    view_inbox:
      desc: "Displays a list of the messages in the empire's inbox. Displays 25 messages per page, sorted newest to oldest.The tags section allows the user to filter the messages. You can do this either client side or server side. Available tags are:"
      parameters:
        - description: A session id.
          name: session_id
        - description: An array reference of tags. Only messages containing these tags will be displayed in the results.
          name: options
      returns: |-
        {
            "messages" : [
                {
                    "id" : "id-goes-here",
                    "subject" : "Vaxaslim",
                    "date" : "01 31 2010 13:09:05 +0600",
                    "from" : "Dr. Stephen T. Colbert DFA",
                    "from_id" : "id-goes-here",
                    "to" : "Jon Stewart",
                    "to_id" : "id-goes-here",
                    "has_read" : 1,
                    "has_replied" : 0,
                    "body_preview" : "Just a reminder that Vaxaslim ",
                    "tags" : "Correspondence" 
                }
            ],
            "message_count" : 14,
            "status" : { ... }
         }
      throws:
        - 1002
        - 1006
    view_sent:
      desc: Exactly the same as view_inbox except that it shows sent messages instead.
      parameters:
        - name: session_id
        - name: options
Map:
  api-url: /map
  methods:
    check_star_for_incoming_probe:
      desc: 'If the star has a status of "unprobed", call this method to find out if there is an incoming probe from this empire.'
      parameters:
        - description: A session id.
          name: session_id
        - description: The unique id for a star.
          name: star_id
      returns: |-
        {
            "status" : { ... },
            "incoming_probe" : "01 31 2010 13:09:05 +0600" # date of arrival will be present if there is an incoming probe
         }
    get_star:
      desc: Retrieves info on a single star.
      parameters:
        - description: A session id.
          name: session_id
        - description: The unique id of the star.
          name: star_id
      returns: |-
        { 
            "star" : {
                "name"          : "Sol",
                "color"         : "yellow",
                "x"             : -41,
                "y"             : 27,
                "bodies"        : [     # only added if a probe is present
                    {
                        same data as get_status() on /body
                    },
                    ...
                ]
            }    
            "status" : { ... }
         }
    get_star_by_name:
      desc: Retrieves info on a single star.
      parameters:
        - description: A session id.
          name: session_id
        - description: The exact name of a star. Case insensitive.
          name: name
      returns: |-
        { 
            "star" : {
                "name"          : "Sol",
                "color"         : "yellow",
                "x"             : -41,
                "y"             : 27,
                "bodies"        : [     # only added if a probe is present
                    {
                        same data as get_status() on /body
                    },
                    ...
                ]
            }    
            "status" : { ... }
         }
    get_star_by_xy:
      desc: Retrieves info on a single star.
      parameters:
        - description: A session id.
          name: session_id
        - description: The x coordinate of a star.
          name: x
        - description: The y coordinate of a star.
          name: y
      returns: |-
        { 
            "star" : {
                "name"          : "Sol",
                "color"         : "yellow",
                "x"             : -41,
                "y"             : 27,
                "bodies"        : [     # only added if a probe is present
                    {
                        same data as get_status() on /body
                    },
                    ...
                ]
            }    
            "status" : { ... }
         }
    get_stars:
      desc: 'Retrieves a chunk of the map and returns it as an array of hashes. Note: Coordinates without a star will not be returned in the results.The data you retrieve will allow you to draw a standard cartesian plane like the following.The requested area can be no larger than 900 spaces (30x30). Throws 1003 when the area is too large.'
      parameters:
        - description: A session id.
          name: session_id
        - description: The top left x coord.
          name: x1
        - description: The top left y coord.
          name: y1
        - description: The bottom right x coord.
          name: x2
        - description: The bottom right y coord.
          name: y2
      returns: |-2
                      y
                      
                      |
                      |
             (-3,3)   |  (3,3)
                      |
         -x ----------+---------- x
                      |
             (-3,-3)  |  (3,-3)
                      |
                      |
        
                     -y
    search_stars:
      desc: If you know a partial name of a star you can search for it. Returns up to 25 results. No body data is returned with this search.
      parameters:
        - description: A session id.
          name: session_id
        - description: A partial name of a star. Case insensitive. Must be at least 3 characters.
          name: name
      returns: |-
        { 
            "stars" : [
                {
                    "name"          : "Sol",
                    "color"         : "yellow",
                    "x"             : -41,
                    "y"             : 27
                },
                {
                    "name"          : "Minsol",
                    "color"         : "green",
                    "x"             : -42,
                    "y"             : 27
                }
             ],
            "status" : { ... }
         }
Stats:
  api-url: /stats
  methods:
    alliance_rank:
      desc: Returns a sorted list of alliance ranked according to various stats.
      parameters:
        - description: A session id.
          name: session_id
        - description: 'An attribute to sort by. Defaults to average_empire_size_rank. Possible values are: average_empire_size_rank, offense_success_rate_rank, defense_success_rate_rank, and dirtiest_rank'
          name: sort_by
        - description: An integer representing the page number to display. There are 25 records per page. Defaults to the page number that the current user is listed on.
          name: page_number
      returns: |-
        {
            "status" : { ... },
            "alliances" : [
                {
                    "alliance_id" : "id-goes-here",                   # unique id
                    "alliance_name" : "Earthlings",                   # alliance name
                    "member_count" : "1",                           # number of empires in the alliance
                    "space_station_count" : 0,                      # number of space stations this alliance controlls
                    "influence" : 0,                                # the number of stars under the jurisdiction of this alliance
                    "colony_count" : "1",                           # number of planets colonized
                    "population" : "7000000000",                    # number of citizens on all planets in the empires of the alliance
                    "average_empire_size" : "7000000000",                   # average size of empires in the alliance
                    "building_count" : "50",                        # number of buildings across all colonies 
                    "average_building_level" : "20",                # average level of all buildings across all colonies
                    "offense_success_rate" : "0.793",               # the offense rate of success of spies at all colonies
                    "defense_success_rate" : "0.49312",             # the defense rate of success of spies at all colonies
                    "dirtiest" : "7941"                            # the number of times a spy has attempted to hurt another empire
                  },
                ...
            ],
           "total_alliances" : 5939,
           "page_number" : 3
         }
    colony_rank:
      desc: Returns a sorted list of planets ranked according to various stats.
      parameters:
        - description: A session id.
          name: session_id
        - description: 'An attribute to sort by. Defaults to population_rank. Possible values are: population_rank'
          name: sort_by
      returns: |-
        {
            "status" : { ... },
            "colonies" : [
                {
                    "empire_id" : "id-goes-here",                   # unique id
                    "empire_name" : "Earthlings",                   # empire name
                    "planet_id" : "id-goes-here",                   # unique id
                    "planet_name" : "Earth",                        # name of the planet
                    "population" : "7000000000",                    # number of citizens on planet
                    "building_count" : "50",                        # number of buildings at this colony
                    "average_building_level" : "20",                # average level of all buildings at this colony
                    "highest_building_level" : "26"                 # highest building at this colony
                  },
                ...
            ]
         }
    credits:
      desc: Retrieves a list of the game credits. It is an array of hashes of arrays.
      returns: |-
        [
            { "Game Server" : ["JT Smith"]},
            { "iPhone Client" : ["Kevin Runde"]},
            { "Web Client" : ["John Rozeske"]},
            { "Play Testers" : ["John Ottinger","Jamie Vrbsky"]},
            ...
         ]
    empire_rank:
      desc: Returns a sorted list of empires ranked according to various stats.
      parameters:
        - description: A session id.
          name: session_id
        - description: 'An attribute to sort by. Defaults to empire_size_rank. Possible values are: empire_size_rank, offense_success_rate_rank, defense_success_rate_rank, and dirtiest_rank'
          name: sort_by
        - description: An integer representing the page number to display. There are 25 records per page. Defaults to the page number that the current user is listed on.
          name: page_number
      returns: |-
        {
            "status" : { ... },
            "empires" : [
                {
                    "empire_id" : "id-goes-here",                   # unique id
                    "empire_name" : "Earthlings",                   # empire name
                    "alliance_id" : "id-goes-here",                 # unique id
                    "alliance_name" : "Earthlings Allied",          # alliance name
                    "colony_count" : "1",                           # number of planets colonized
                    "population" : "7000000000",                    # number of citizens on all planets in the empire
                    "empire_size" : "7000000000",                   # size of entire empire
                    "building_count" : "50",                        # number of buildings across all colonies
                    "average_building_level" : "20",                # average level of all buildings across all colonies
                    "offense_success_rate" : "0.793",               # the offense rate of success of spies at all colonies
                    "defense_success_rate" : "0.49312",             # the defense rate of success of spies at all colonies
                    "dirtiest" : "7941"                            # the number of times a spy has attempted to hurt another empire
                  },
                ...
            ],
           "total_empires" : 5939,
           "page_number" : 3
         }
    find_alliance_rank:
      desc: Search for a particular alliance in the alliance_rank().
      parameters:
        - description: A session id.
          name: session_id
        - description: The field to sort by. See alliance_rank for details.
          name: sort_by
        - description: A full or partial alliance name to search by. Must be at least 3 characters to search.
          name: alliance_name
      returns: |-
        {
            "status" : { ... },
            "alliances" : [
                {
                    "alliance_id" : "id-goes-here",
                    "alliance_name" : "Earth Allies",
                    "page_number" : "54",
                }
                ...
            ]
         }
    find_empire_rank:
      desc: Search for a particular empire in the empire_rank().
      parameters:
        - description: A session id.
          name: session_id
        - description: The field to sort by. See empire_rank for details.
          name: sort_by
        - description: A full or partial empire name to search by. Must be at least 3 characters to search.
          name: empire_name
      returns: |-
        {
            "status" : { ... },
            "empires" : [
                {
                    "empire_id" : "id-goes-here",
                    "empire_name" : "Earthlings",
                    "page_number" : "54",
                }
                ...
            ]
         }
    spy_rank:
      desc: Returns a sorted list of the top spies in the game ranked according to various stats.
      parameters:
        - description: A session id.
          name: session_id
        - description: 'An attribute to sort by. Defaults to level_rank. Possible values are: level_rank success_rate_rank and dirtiest_rank'
          name: sort_by
      returns: |-
        {
            "status" : { ... },
            "spies" : [
                {
                    "empire_id" : "id-goes-here",                   # unique id
                    "empire_name" : "Earthlings",                   # empire name
                    "spy_id" : "id-goes-here",                      # unique id
                    "spy_name" : "Agent Null",                      # the name of this spy
                    "age" : "3693",                                 # how old is this guy in seconds
                    "level" : "18",                                 # the level of this spy
                    "success_rate" : "0.731",                       # the rate of success this spy has had for both offense and defensive tasks
                    "dirtiest" : "7941",                            # the number of times a spy has attempted to hurt another empire
                  },
                ...
            ]
         }
    weekly_medal_winners:
      desc: Returns a list of the empires who won this week's weekly medals.
      parameters:
        - description: A session id.
          name: session_id
      returns: |-
        {
            "status" : { ... },
            "winners" : [
                {
                    "empire_id" : "id-goes-here",
                    "empire_name" : "Earthlings",
                    "medal_name" : "Dirtiest Player In The Game",
                    "medal_image" : "dirtiest1",
                    "times_earned" : 4,
                },
                ...
            ]
         }
